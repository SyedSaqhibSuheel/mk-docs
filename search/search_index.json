{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Architecture Diagram","text":""},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here</p>"},{"location":"#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code here\ndef myfunction()\n// some comment \n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#icons-and-emojs","title":"Icons and Emojs","text":""},{"location":"websequence/","title":"WebSequence","text":"<p>WebSequence is part of the Code2Diagram tool, designed for creating sequence diagrams using a Domain-Specific Language (DSL). These diagrams illustrate the interactions between participants over time, making it easier to visualize complex processes, protocols, and workflows.</p>"},{"location":"websequence/#benefits-of-websequence","title":"Benefits of WebSequence","text":"<ul> <li>Simplicity: WebSequence uses a straightforward, text-based DSL, making it accessible even to those without extensive graphical design skills.</li> <li>Cross-Platform: The tool can run in both Node.js environments and browsers, providing flexibility in usage.</li> <li>Ease of Integration: It can be easily integrated into web projects, documentation systems, and other software tools.</li> <li>Customization: Users can customize diagrams to match their specific needs, adjusting elements like colors, fonts, and participant roles.</li> <li>Exportability: Diagrams created with WebSequence can be exported in various formats such as SVG, making them easy to share and embed in different platforms.</li> </ul>"},{"location":"websequence/#dsl-basics","title":"DSL Basics","text":"<p>Comments begin with a # and end at the next newline: <pre><code># This is a comment\n</code></pre> Meta data can be provided with particular keywords:</p> <p><pre><code>title \"My title here\"\n</code></pre> Quoting strings is usually optional, for example these are the same:</p> <pre><code>title \"My title here\"\ntitle My title here\ntitle \"My title\" here\ntitle \"My\" \"title\" \"here\"\n</code></pre> <p>This is an websequence diagram for all the above code:</p> <p></p> <p>Each non-metadata line represents a step in the sequence, in order.</p> <pre><code># Draw an arrow from agent \"Foo Bar\" to agent \"Zig Zag\" with a label:\n# (implicitly creates the agents if they do not already exist)\n\nFoo Bar -&gt; Zig Zag: Do a thing\n\n# With quotes, this is the same as:\n\n\"Foo Bar\" -&gt; \"Zig Zag\": \"Do a thing\"\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Blocks surround steps, and can nest: <pre><code>if something\n  Foo -&gt; Bar\nelse if something else\n  Foo -&gt; Baz\n  if more stuff\n    Baz -&gt; Zig\n  end\nend\n</code></pre> This is an websequence diagram for the above code:</p> <p></p>"},{"location":"websequence/#how-it-works","title":"How It Works","text":"<p>WebSequence operates by interpreting text-based descriptions of sequence diagrams written in its DSL. Users define participants and their interactions using this language, and WebSequence renders these descriptions into visual diagrams.</p>"},{"location":"websequence/#key-features-and-syntax","title":"Key Features and Syntax","text":""},{"location":"websequence/#participants","title":"Participants","text":"<p>Participants are the entities involved in the interaction, such as users, systems, or components.</p> <pre><code>Alice -&gt; Bob: Hello Bob, how are you?\nBob -&gt; Alice: I'm good, thanks!\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p>"},{"location":"websequence/#messages","title":"Messages","text":"<p>Messages represent interactions between participants, indicated by arrows (<code>-&gt;</code>).</p> <p><pre><code>User -&gt; Server: Request\nServer -&gt; User: Response\n</code></pre> This is an websequence diagram for the above code:</p> <p></p>"},{"location":"websequence/#notes","title":"Notes","text":"<p>Notes provide additional context or explanations within the diagram.</p> <p><pre><code>note right of User: User initiates the request\n</code></pre> This is an websequence diagram for the above code:</p> <p></p>"},{"location":"websequence/#titles-and-labels","title":"Titles and Labels","text":"<p>Diagrams can have titles for better clarity.</p> <p><pre><code>title Authentication Process\n</code></pre> This is an websequence diagram for the above code:</p> <p></p>"},{"location":"websequence/#customization","title":"Customization","text":"<p>Various attributes can be adjusted to change the appearance and style of the diagrams.</p>"},{"location":"websequence/#examples","title":"Examples","text":"<p>Here's an example description using WebSequence:</p> <p>Simple Usage</p> <p><pre><code>title Labyrinth\nBowie -&gt; Goblin: You remind me of the babe\nGoblin -&gt; Bowie: What babe?\nBowie -&gt; Goblin: The babe with the power\nGoblin -&gt; Bowie: What power?\nnote right of Bowie, Goblin: Most people get muddled here!\nBowie -&gt; Goblin: \"The power of voodoo\"\nGoblin -&gt; Bowie: \"Who-do?\"\nBowie -&gt; Goblin: You do!\nGoblin -&gt; Bowie: Do what?\nBowie -&gt; Goblin: Remind me of the babe!\n\nBowie -&gt; Audience: Sings\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Connection Types</p> <p><pre><code>title Connection Types\n\nbegin Foo, Bar, Baz\n\nFoo -&gt; Bar: Simple arrow\nBar --&gt; Baz: Dashed arrow\nFoo &lt;- Bar: Reversed arrow\nBar &lt;-- Baz: Reversed &amp; dashed\nFoo &lt;-&gt; Bar: Double arrow\nBar &lt;--&gt; Baz: Double dashed arrow\n\n# An arrow with no label:\nFoo -&gt; Bar\n\nBar -&gt;&gt; Baz: Different arrow\nFoo &lt;&lt;--&gt; Bar: Mix of arrows\n\nBar -&gt; Bar: Bar talks to itself\n\nFoo -&gt; +Bar: Foo asks Bar\n-Bar --&gt; Foo: and Bar replies\n\nBar -x Baz: Lost message\n\n# Arrows leaving on the left and right of the diagram\n[ -&gt; Foo: From the left\n[ &lt;- Foo: To the left\nFoo -&gt; ]: To the right\nFoo &lt;- ]: From the right\n[ ~&gt; ]: Wavy left to right!\n# (etc.)\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Dividers</p> <p><pre><code>title Dividers\n\nbegin Foo, Bar, Baz\n\nFoo -&gt; +Bar\n\ndivider\n\nBar -&gt; +Baz\n\ndivider delay: This takes a while\n\n-Baz --&gt; Bar\n\ndivider tear with height 20: Lots of stuff happens\n\n-Bar --&gt; Foo\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Notes &amp; State</p> <p><pre><code>title Note Placements\n\nbegin Foo, Bar\n\nnote over Foo: Foo says something\nnote left of Foo: Stuff\nnote right of Bar: More stuff\nnote over Foo, Bar: \"Foo and Bar\non multiple lines\"\nnote between Foo, Bar: Link\n\n# in long diagrams, we can add reminders of which agent is which:\nrelabel\n\ntext right: \"Comments\\nOver here!\"\n\nstate over Foo: Foo is ponderous\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Logic</p> <pre><code>title At the Bank\n\nbegin Person, ATM, Bank\nPerson -&gt; ATM: Request money\nATM -&gt; Bank: Check funds\nif fraud detected\n  Bank -&gt; Police: \"Get 'em!\"\n  Police -&gt; Person: \"You're nicked\"\n  end Police\nelse if sufficient funds\n  ATM -&gt; Bank: Withdraw funds\n  repeat until \"all requested money\n                has been handed over\"\n    ATM -&gt; Person: Dispense note\n  end\nelse\n  ATM -&gt; Person: Error\nend\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Label Templates</p> <pre><code>autolabel \"[&lt;inc&gt;] &lt;label&gt;\"\n\nbegin \"Underpants\\nGnomes\" as A\nA &lt;- ]: Collect underpants\nA &lt;-&gt; ]: ???\nA &lt;- ]: Profit!\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Multiline Text</p> <p><pre><code>title \"My Multiline\nTitle\"\n\nbegin Foo, Bar\n\nnote over Foo: \"Also possible\\nwith escapes\"\n\nFoo -&gt; Bar: \"Lines of text\\non this arrow\"\n\nif \"Even multiline\\ninside conditions like this\"\n  Foo -&gt; \"Multiline\\nagent\"\nend\n\nstate over Foo: \"Newlines here,\ntoo!\"\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Themes</p> <p><pre><code>theme sketch\n\ntitle Mockup\n\nA thing -&gt; +Another thing: Something happens\n-Another thing --&gt; A thing: With some response\nnote right of Another thing: Find out what happens here\nend Another thing\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Short-Lived Agents</p> <p><pre><code>title \"Baz doesn't live long\"\n\nnote over Foo, Bar: Using begin / end\n\nbegin Baz\nBar -&gt; Baz\nBaz -&gt; Foo\nend Baz\n\nnote over Foo, Bar: Using * / !\n\n# * and ! cause agents to be\n# created and destroyed inline\nBar -&gt; *Baz: make Baz\nFoo &lt;- !Baz: end Baz\n\n# Foo and Bar end with black bars\nterminators bar\n# (options are: box, bar, cross, fade, none)\n</code></pre> This is an websequence diagram for the above code:</p> <p></p> <p>Agent Aliases</p> <pre><code>define My complicated agent name as A\ndefine \"Another agent name,\nand this one's multi-line!\" as B\n\nA -&gt; B: this is much easier\nA &lt;- B: than writing the whole name\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Markdown</p> <pre><code>define \"Name with\n**bold** and _italic_\" as A\ndefine \"Also `code`\nand ~strikeout~\" as B\n\nA -&gt; B: \"_**basic markdown\nis supported!**_\"\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Alternative Agent Ordering</p> <pre><code>define Baz, Foo\n\nFoo -&gt; Bar\nBar -&gt; Baz\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Agent Types</p> <pre><code>begin User, Application, PostgreSQL\n\nUser -&gt; +Application\nApplication -&gt; +PostgreSQL\n-PostgreSQL --&gt; Application\n-Application --&gt; User\n\nUser is a person\nPostgreSQL is a database\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Asynchronous Communication</p> <pre><code>begin Initiator as I, Receiver as R\n\n# the '...id' syntax allows connections\n# to span multiple lines\n\nI -&gt; ...fin1\n...fin1 -&gt; R: FIN\n\n# they can even inter-mix!\nR -&gt; ...ack1\nR -&gt; ...fin2\n...ack1 -&gt; I: ACK\n...fin2 -&gt; I: FIN\n\n!I -&gt; ...ack2\n...ack2 -&gt; !R: ACK\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p> <p>Simultaneous Actions</p> <pre><code>begin A, B, C, D\nA -&gt; C\n\n# Define a marker which can be returned to later\n\nsome primary process:\nA -&gt; B\nB -&gt; A\nA -&gt; B\nB -&gt; A\n\n# Return to the defined marker\n# (should be interpreted as no-higher-then the marker; may be\n# pushed down to keep relative action ordering consistent)\n\nsimultaneously with some primary process:\nC -&gt; D\nD -&gt; C\nend D\nC -&gt; A\n\n# The marker name is optional; using \"simultaneously:\" with no\n# marker will jump to the top of the entire sequence.\n</code></pre> <p>This is an websequence diagram for the above code:</p> <p></p>"},{"location":"websequence/#practical-uses","title":"Practical Uses","text":"<p>WebSequence is particularly useful in various scenarios such as:</p> <ul> <li>Software Development: Documenting system interactions, API calls, and workflows.</li> <li>Project Management: Visualizing process flows and task dependencies.</li> <li>Education and Training: Teaching complex interactions in an easily digestible format.</li> <li>Business Analysis: Mapping out business processes and customer journeys.</li> </ul>"}]}